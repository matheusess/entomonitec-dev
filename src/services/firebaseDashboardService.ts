import { 
  collection, 
  query, 
  where, 
  getDocs, 
  orderBy,
  limit
} from 'firebase/firestore';
import { db, auth } from '@/lib/firebase';
import { VisitForm, LIRAAVisitForm } from '@/types/visits';

// Interfaces para os dados do dashboard
export interface DashboardData {
  totalVisits: number;
  routineVisits: number;
  liraaVisits: number;
  criticalAreas: number;
  agentsActive: number;
  larvaePositive: number;
  breedingSitesEliminated: number;
  averageRisk: number;
  coveragePercentage: number;
  samplingQuality: number;
  inconsistentData: number;
  missingSamples: number;
}

export interface NeighborhoodRisk {
  name: string;
  riskLevel: 'low' | 'medium' | 'high' | 'critical';
  coverage: number;
  larvaeIndex: number;
  lastUpdate: string;
  priority: number;
  visitedProperties: number;
  totalProperties: number;
  refusedAccess: number;
  incompleteData: number;
  coordinates?: [number, number]; // Coordenadas reais das visitas
}

// Interface para classifica√ß√£o de prioridades baseada na tabela fornecida
export interface PriorityClassification {
  level: number;
  infestationLevel: 'Alto' | 'M√©dio' | 'Baixo';
  coverageLevel: 'Alto' | 'M√©dio' | 'Baixo';
  iipCriteria: string;
  coverageCriteria: string;
  diagnosis: string;
  immediateConclusion: string;
  detail: string;
  actions: string;
}

// Interface para dados de visitas de rotina com classifica√ß√£o
export interface RoutineVisitData {
  neighborhood: string;
  totalVisits: number;
  positiveVisits: number;
  completedVisits: number;
  iip: number;
  coverage: number;
  priority: number;
  classification: PriorityClassification;
  lastUpdate: Date;
  coordinates?: [number, number];
}

class FirebaseDashboardService {
  private readonly VISITS_COLLECTION = 'visits';

  /**
   * Busca dados consolidados do dashboard para uma organiza√ß√£o
   */
  async getDashboardData(organizationId: string): Promise<DashboardData> {
    try {
      console.log('üîÑ Buscando dados do dashboard para organiza√ß√£o:', organizationId);
      console.log('üåç Ambiente:', window.location.hostname);
      console.log('üîê Firebase Auth:', auth.currentUser ? 'Autenticado' : 'N√£o autenticado');
      
      // PRIMEIRO: Buscar TODAS as visitas (sem filtro de organiza√ß√£o) para debug
      console.log('üîç DEBUG: Buscando TODAS as visitas primeiro...');
      const allVisitsQuery = query(
        collection(db, this.VISITS_COLLECTION),
        orderBy('createdAt', 'desc'),
        limit(100)
      );

      const allVisitsSnapshot = await getDocs(allVisitsQuery);
      console.log(`üìä TOTAL de visitas no Firebase: ${allVisitsSnapshot.size}`);
      
      // Log das visitas encontradas
      allVisitsSnapshot.forEach((doc) => {
        const data = doc.data();
        console.log('üìÑ Visita encontrada:', {
          id: doc.id,
          type: data.type,
          organizationId: data.organizationId,
          neighborhood: data.neighborhood,
          createdAt: data.createdAt?.toDate()
        });
      });

      // SEGUNDO: Buscar visitas da organiza√ß√£o espec√≠fica
      const visitsQuery = query(
        collection(db, this.VISITS_COLLECTION),
        where('organizationId', '==', organizationId),
        // Remover filtro de tipo para buscar TODAS as visitas (rotina + LIRAa)
        orderBy('createdAt', 'desc'),
        limit(1000)
      );

      const visitsSnapshot = await getDocs(visitsQuery);
      const visits: VisitForm[] = [];

      visitsSnapshot.forEach((doc) => {
        const data = doc.data();
        visits.push({
          ...data,
          id: doc.id,
          createdAt: data.createdAt?.toDate() || new Date(),
          updatedAt: data.updatedAt?.toDate() || new Date()
        } as VisitForm);
      });

      console.log(`‚úÖ ${visits.length} visitas da organiza√ß√£o '${organizationId}' carregadas`);
      
      if (visits.length === 0) {
        console.log('‚ö†Ô∏è NENHUMA visita encontrada para esta organiza√ß√£o!');
        console.log('üí° Verifique se o organizationId das visitas est√° correto');
      }

      // Processar dados
      const dashboardData = this.processVisitsData(visits);
      
      console.log('üìä Dados processados:', dashboardData);
      
      return dashboardData;
    } catch (error) {
      console.error('‚ùå Erro ao buscar dados do dashboard:', error);
      throw new Error(`Falha ao carregar dados do dashboard: ${error}`);
    }
  }

  /**
   * Busca classifica√ß√£o de risco por bairro
   */
  async getNeighborhoodRisks(organizationId: string): Promise<NeighborhoodRisk[]> {
    try {
      console.log('üîÑ Calculando riscos por bairro para organiza√ß√£o:', organizationId);
      
      // Buscar TODAS as visitas (rotina + LIRAa) para an√°lise de bairros
      const visitsQuery = query(
        collection(db, this.VISITS_COLLECTION),
        where('organizationId', '==', organizationId),
        orderBy('createdAt', 'desc'),
        limit(500)
      );

      const visitsSnapshot = await getDocs(visitsQuery);
      const visits: VisitForm[] = [];

      visitsSnapshot.forEach((doc) => {
        const data = doc.data();
        visits.push({
          ...data,
          id: doc.id,
          createdAt: data.createdAt?.toDate() || new Date(),
          updatedAt: data.updatedAt?.toDate() || new Date()
        } as VisitForm);
      });

      console.log(`‚úÖ ${visits.length} visitas carregadas para an√°lise de bairros`);

      // Processar dados por bairro
      const neighborhoodRisks = this.processNeighborhoodRisks(visits);
      
      return neighborhoodRisks;
    } catch (error) {
      console.error('‚ùå Erro ao buscar riscos por bairro:', error);
      throw new Error(`Falha ao carregar riscos por bairro: ${error}`);
    }
  }

  /**
   * Processa dados das visitas para gerar m√©tricas do dashboard
   */
  private processVisitsData(visits: VisitForm[]): DashboardData {
    console.log('üîç DEBUG: Processando TODAS as visitas para dashboard:', visits.length);
    
    const totalVisits = visits.length;
    let larvaePositive = 0;
    let breedingSitesEliminated = 0;

    // Processar todas as visitas para an√°lise de larvas
    visits.forEach((visit, index) => {
      console.log(`üîç DEBUG: Visita ${index + 1}:`, {
        id: visit.id,
        type: visit.type,
        neighborhood: visit.neighborhood,
        larvaeFound: (visit as any).larvaeFound,
        pupaeFound: (visit as any).pupaeFound,
        positiveContainers: (visit as any).positiveContainers,
        larvaeSpecies: (visit as any).larvaeSpecies
      });
      
      // Verificar se tem larvas (diferentes campos para diferentes tipos de visita)
      let hasLarvae = false;
      
      if (visit.type === 'routine') {
        // Visitas de rotina usam larvaeFound/pupaeFound
        hasLarvae = (visit as any).larvaeFound || (visit as any).pupaeFound;
      } else if (visit.type === 'liraa') {
        // Visitas LIRAa usam positiveContainers ou larvaeSpecies
        hasLarvae = (visit as any).positiveContainers > 0 || 
                   ((visit as any).larvaeSpecies && (visit as any).larvaeSpecies.length > 0);
      }
      
      if (hasLarvae) {
        larvaePositive++;
        breedingSitesEliminated++;
      }
    });

    // Calcular agentes ativos (√∫nicos nos √∫ltimos 30 dias)
    const thirtyDaysAgo = new Date();
    thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
    
    const activeAgents = new Set(
      visits
        .filter(v => v.createdAt >= thirtyDaysAgo)
        .map(v => v.agentId)
    );

    // Calcular √≠ndice m√©dio municipal (baseado na propor√ß√£o de visitas com larvas encontradas)
    const averageRisk = totalVisits > 0 ? (larvaePositive / totalVisits) * 100 : 0;

    // Calcular cobertura (visitas conclu√≠das vs total)
    const completedVisits = visits.filter(v => v.status === 'completed').length;
    const coveragePercentage = totalVisits > 0 ? (completedVisits / totalVisits) * 100 : 0;

    // Qualidade amostral (visitas com dados completos)
    const completeDataVisits = visits.filter(visit => 
      visit.neighborhood && 
      visit.location &&
      visit.status === 'completed'
    ).length;
    const samplingQuality = totalVisits > 0 ? (completeDataVisits / totalVisits) * 100 : 0;

    // Dados inconsistentes (visitas com problemas)
    const inconsistentData = visits.filter(v => 
      !v.neighborhood || 
      !v.location || 
      v.status === 'refused'
    ).length;

    // Separar por tipo para retorno
    const routineVisits = visits.filter(v => v.type === 'routine');
    const liraaVisits = visits.filter(v => v.type === 'liraa');

    return {
      totalVisits,
      routineVisits: routineVisits.length,
      liraaVisits: liraaVisits.length,
      criticalAreas: this.calculateCriticalAreas(visits),
      agentsActive: activeAgents.size,
      larvaePositive,
      breedingSitesEliminated,
      averageRisk: Math.round(averageRisk * 100) / 100,
      coveragePercentage: Math.round(coveragePercentage * 100) / 100,
      samplingQuality: Math.round(samplingQuality * 100) / 100,
      inconsistentData,
      missingSamples: totalVisits - completedVisits
    };
  }

  /**
   * Calcula √°reas cr√≠ticas baseado nas visitas com larvas
   */
  private calculateCriticalAreas(visits: VisitForm[]): number {
    const neighborhoods = new Map<string, { positive: number; total: number }>();

    visits.forEach(visit => {
      if (!visit.neighborhood) return;

      const neighborhood = visit.neighborhood;
      if (!neighborhoods.has(neighborhood)) {
        neighborhoods.set(neighborhood, { positive: 0, total: 0 });
      }

      const data = neighborhoods.get(neighborhood)!;
      data.total += 1; // Cada visita conta como 1

      // Verificar se tem larvas (diferentes campos para diferentes tipos de visita)
      let hasLarvae = false;
      
      if (visit.type === 'routine') {
        // Visitas de rotina usam larvaeFound/pupaeFound
        hasLarvae = (visit as any).larvaeFound || (visit as any).pupaeFound;
      } else if (visit.type === 'liraa') {
        // Visitas LIRAa usam positiveContainers ou larvaeSpecies
        hasLarvae = (visit as any).positiveContainers > 0 || 
                   ((visit as any).larvaeSpecies && (visit as any).larvaeSpecies.length > 0);
      }
      
      if (hasLarvae) {
        data.positive += 1;
      }
    });

    // Contar bairros com mais de 50% de visitas positivas (considerado cr√≠tico)
    let criticalAreas = 0;
    neighborhoods.forEach((data) => {
      if (data.total > 0) {
        const index = (data.positive / data.total) * 100;
        if (index > 50) { // Mais de 50% das visitas com larvas
          criticalAreas++;
        }
      }
    });

    return criticalAreas;
  }

  /**
   * Processa riscos por bairro
   */
  private processNeighborhoodRisks(visits: VisitForm[]): NeighborhoodRisk[] {
    const neighborhoods = new Map<string, {
      visits: VisitForm[];
      totalVisits: number;
      positiveVisits: number;
      completedVisits: number;
      refusedVisits: number;
      lastUpdate: Date;
    }>();

    // Agrupar visitas por bairro
    visits.forEach(visit => {
      if (!visit.neighborhood) return;

      const neighborhood = visit.neighborhood;
      if (!neighborhoods.has(neighborhood)) {
        neighborhoods.set(neighborhood, {
          visits: [],
          totalVisits: 0,
          positiveVisits: 0,
          completedVisits: 0,
          refusedVisits: 0,
          lastUpdate: visit.createdAt
        });
      }

      const data = neighborhoods.get(neighborhood)!;
      data.visits.push(visit);
      data.totalVisits += 1;

      // Verificar se tem larvas (diferentes campos para diferentes tipos de visita)
      let hasLarvae = false;
      
      if (visit.type === 'routine') {
        // Visitas de rotina usam larvaeFound/pupaeFound
        hasLarvae = (visit as any).larvaeFound || (visit as any).pupaeFound;
      } else if (visit.type === 'liraa') {
        // Visitas LIRAa usam positiveContainers ou larvaeSpecies
        hasLarvae = (visit as any).positiveContainers > 0 || 
                   ((visit as any).larvaeSpecies && (visit as any).larvaeSpecies.length > 0);
      }
      
      if (hasLarvae) {
        data.positiveVisits += 1;
      }

      if (visit.status === 'completed') data.completedVisits++;
      if (visit.status === 'refused') data.refusedVisits++;
      if (visit.createdAt > data.lastUpdate) data.lastUpdate = visit.createdAt;
    });

    // Converter para array de NeighborhoodRisk
    const risks: NeighborhoodRisk[] = [];
    
    neighborhoods.forEach((data, name) => {
      const larvaeIndex = data.totalVisits > 0 
        ? (data.positiveVisits / data.totalVisits) * 100 
        : 0;

      // Calcular coordenadas m√©dias das visitas reais
      const validVisits = data.visits.filter(visit => visit.location?.latitude && visit.location?.longitude);
      let coordinates: [number, number] | undefined;
      
      if (validVisits.length > 0) {
        const avgLat = validVisits.reduce((sum, visit) => sum + visit.location!.latitude, 0) / validVisits.length;
        const avgLng = validVisits.reduce((sum, visit) => sum + visit.location!.longitude, 0) / validVisits.length;
        coordinates = [avgLat, avgLng];
      }

      console.log(`üîç DEBUG Bairro ${name}:`, {
        totalVisits: data.totalVisits,
        positiveVisits: data.positiveVisits,
        larvaeIndex: larvaeIndex,
        visits: data.visits.length,
        validCoordinates: validVisits.length,
        coordinates: coordinates
      });

      const riskLevel = this.calculateRiskLevel(larvaeIndex);
      const coverage = data.visits.length > 0 
        ? (data.completedVisits / data.visits.length) * 100 
        : 0;

      risks.push({
        name,
        riskLevel,
        coverage: Math.round(coverage * 100) / 100,
        larvaeIndex: Math.round(larvaeIndex * 100) / 100,
        lastUpdate: data.lastUpdate.toISOString(),
        priority: this.calculatePriority(riskLevel, coverage),
        visitedProperties: data.completedVisits,
        totalProperties: data.visits.length,
        refusedAccess: data.refusedVisits,
        incompleteData: data.visits.length - data.completedVisits - data.refusedVisits,
        coordinates
      });
    });

    // Ordenar por prioridade (risco alto primeiro)
    return risks.sort((a, b) => b.priority - a.priority);
  }

    /**
   * Calcula n√≠vel de risco baseado no √≠ndice de larvas para visitas de rotina
   * CRIT√âRIOS PARA VISITAS DE ROTINA:
   * 
   * - CR√çTICO (‚â•80%): Mais de 80% das visitas com larvas - situa√ß√£o cr√≠tica
   * - ALTO (60-79%): 60-79% das visitas com larvas - situa√ß√£o de alerta
   * - M√âDIO (40-59%): 40-59% das visitas com larvas - situa√ß√£o de aten√ß√£o
   * - BAIXO (<40%): Menos de 40% das visitas com larvas - situa√ß√£o controlada
   */
  private calculateRiskLevel(larvaeIndex: number): 'low' | 'medium' | 'high' | 'critical' {
    if (larvaeIndex >= 80) return 'critical';   // ‚â•80% = CR√çTICO
    if (larvaeIndex >= 60) return 'high';       // 60-79% = ALTO
    if (larvaeIndex >= 40) return 'medium';     // 40-59% = M√âDIO
    return 'low';                               // <40% = BAIXO
  }

  /**
   * Calcula prioridade baseada no risco e cobertura
   */
  private calculatePriority(riskLevel: string, coverage: number): number {
    const riskWeight = {
      'critical': 4,
      'high': 3,
      'medium': 2,
      'low': 1
    }[riskLevel] || 1;

    const coverageWeight = coverage < 50 ? 2 : coverage < 80 ? 1.5 : 1;

    return riskWeight * coverageWeight;
  }

  /**
   * Classifica prioridade baseada na tabela fornecida (1-9)
   * Baseado em IIP e Cobertura para visitas de rotina
   */
  private classifyPriority(iip: number, coverage: number): PriorityClassification {
    // Determinar n√≠vel de infesta√ß√£o
    const infestationLevel: 'Alto' | 'M√©dio' | 'Baixo' = 
      iip >= 4 ? 'Alto' : iip >= 1 ? 'M√©dio' : 'Baixo';
    
    // Determinar n√≠vel de cobertura
    const coverageLevel: 'Alto' | 'M√©dio' | 'Baixo' = 
      coverage >= 80 ? 'Alto' : coverage >= 50 ? 'M√©dio' : 'Baixo';

    // Classificar baseado na tabela
    if (infestationLevel === 'Alto' && coverageLevel === 'Alto') {
      return {
        level: 1,
        infestationLevel: 'Alto',
        coverageLevel: 'Alto',
        iipCriteria: '>= 4%',
        coverageCriteria: '>= 80%',
        diagnosis: 'Infesta√ß√£o confirmada',
        immediateConclusion: 'A√ß√£o necess√°ria',
        detail: 'O resultado mostra uma infesta√ß√£o moderada detectada com boa qualidade de amostragem. O dado √© consistente e permite um diagn√≥stico confi√°vel da situa√ß√£o. O local j√° exige resposta concreta e planejamento de conten√ß√£o. Executar a√ß√µes de controle e intensificar o monitoramento da √°rea.',
        actions: 'Intensificar a√ß√µes imediatas de controle vetorial: visitas domiciliares semanais, elimina√ß√£o mec√¢nica de criadouros, aplica√ß√£o de larvicidas e mobiliza√ß√£o social. Ativar plano de conting√™ncia local.'
      };
    }
    
    if (infestationLevel === 'Alto' && coverageLevel === 'M√©dio') {
      return {
        level: 2,
        infestationLevel: 'Alto',
        coverageLevel: 'M√©dio',
        iipCriteria: '>= 4%',
        coverageCriteria: '>= 50%; < 80%',
        diagnosis: 'Risco eminente',
        immediateConclusion: 'Ampliar amostragem e agir',
        detail: 'A √°rea apresenta um n√∫mero relevante de focos, com amostragem de cobertura moderada. O cen√°rio j√° exige aten√ß√£o, mas ainda possui margem de incerteza quanto √† extens√£o total da infesta√ß√£o. Ampliar a cobertura da coleta e iniciar medidas de controle proporcionais.',
        actions: 'Aumentar cobertura de visitas para atingir 80%+, refor√ßar inspe√ß√£o em √°reas cr√≠ticas, intensificar campanhas educativas e a√ß√µes de bloqueio vetorial (UBV port√°til/costais).'
      };
    }
    
    if (infestationLevel === 'Alto' && coverageLevel === 'Baixo') {
      return {
        level: 3,
        infestationLevel: 'Alto',
        coverageLevel: 'Baixo',
        iipCriteria: '>= 4%',
        coverageCriteria: '< 50%',
        diagnosis: 'Subdimensionamento',
        immediateConclusion: 'Alto risco oculto',
        detail: 'Apesar da presen√ßa significativa de focos, a coleta foi insuficiente para representar com confian√ßa a situa√ß√£o. Isso indica alto risco de subdimensionamento da infesta√ß√£o, dificultando o planejamento de resposta adequada. Refazer a coleta com urg√™ncia e avaliar refor√ßo nas a√ß√µes de campo.',
        actions: 'Melhorar imediatamente a cobertura de visitas (meta 80%), reavaliar amostragem e log√≠stica das equipes, usar apoio intersetorial (agentes comunit√°rios, mutir√µes). Risco de infesta√ß√£o real estar subnotificado.'
      };
    }
    
    if (infestationLevel === 'M√©dio' && coverageLevel === 'Baixo') {
      return {
        level: 4,
        infestationLevel: 'M√©dio',
        coverageLevel: 'Baixo',
        iipCriteria: '>= 1%; <4%',
        coverageCriteria: '< 50%',
        diagnosis: 'Ocorr√™ncia moderada',
        immediateConclusion: 'Necessidade de nova amostragem',
        detail: 'Foram detectados poucos focos, mas com amostragem bastante limitada. Esse cen√°rio compromete a confiabilidade do resultado e dificulta estimar corretamente a real extens√£o da infesta√ß√£o. H√° possibilidade de que a ocorr√™ncia esteja subestimada. Repetir a coleta com maior abrang√™ncia e revisar o n√≠vel de risco da √°rea.',
        actions: 'Deve-se ampliar a amostragem para confirmar a real situa√ß√£o, aumentando o n√∫mero de visitas em √°reas ainda n√£o contempladas, aplicar larvicida nos focos encontrados, refor√ßar a orienta√ß√£o comunit√°ria sobre elimina√ß√£o de criadouros e manter monitoramento semanal at√© que a cobertura m√≠nima de 80% seja atingida.'
      };
    }
    
    if (infestationLevel === 'M√©dio' && coverageLevel === 'M√©dio') {
      return {
        level: 5,
        infestationLevel: 'M√©dio',
        coverageLevel: 'M√©dio',
        iipCriteria: '>= 1%; <4%',
        coverageCriteria: '>= 50%; < 80%',
        diagnosis: 'Infesta√ß√£o moderada',
        immediateConclusion: 'Aten√ß√£o ao refor√ßo da coleta',
        detail: 'O n√∫mero de focos √© moderado e a amostragem razo√°vel. Isso pode indicar um in√≠cio de infesta√ß√£o, mas o dado ainda tem margem de incerteza. N√£o se pode afirmar que o problema est√° restrito sem uma coleta mais robusta. Refor√ßar a amostragem e iniciar a√ß√µes preventivas no local.',
        actions: '√â necess√°rio expandir a cobertura das visitas para alcan√ßar pelo menos 80%, priorizando √°reas com maior concentra√ß√£o de focos, intensificar campanhas educativas porta a porta, avaliar a necessidade de aplica√ß√£o de inseticida UBV (fumac√™) em pontos cr√≠ticos e manter monitoramento quinzenal com relat√≥rios regulares para os gestores locais'
      };
    }
    
    if (infestationLevel === 'Baixo' && coverageLevel === 'Baixo') {
      return {
        level: 6,
        infestationLevel: 'Baixo',
        coverageLevel: 'Baixo',
        iipCriteria: '< 1%',
        coverageCriteria: '< 50%',
        diagnosis: 'Amostragem insuficiente',
        immediateConclusion: 'Risco n√£o pode ser descartado',
        detail: 'Poucos focos encontrados na √°rea, mas a amostragem realizada est√° muito abaixo do n√≠vel m√≠nimo recomendado. Isso significa que o dado √© insuficiente para qualquer conclus√£o sobre a situa√ß√£o real da √°rea. √â fundamental refor√ßar a cobertura amostral para permitir uma avalia√ß√£o confi√°vel e evitar falsa sensa√ß√£o de seguran√ßa.',
        actions: 'Priorizar aumento de cobertura para reduzir vi√©s, organizar mutir√µes, envolver lideran√ßas comunit√°rias e revisar planejamento territorial.'
      };
    }
    
    if (infestationLevel === 'M√©dio' && coverageLevel === 'Alto') {
      return {
        level: 7,
        infestationLevel: 'M√©dio',
        coverageLevel: 'Alto',
        iipCriteria: '>= 1%; <4%',
        coverageCriteria: '>= 80%',
        diagnosis: 'Risco de infesta√ß√£o',
        immediateConclusion: 'Iniciar medidas preventivas',
        detail: 'O √≠ndice de infesta√ß√£o associado √† amostragem adequada, revelam que o dado √© confi√°vel para indicar um risco de infesta√ß√£o. Este √© um momento favor√°vel para intervir precocemente e evitar a progress√£o do problema. Iniciar medidas de conten√ß√£o e manter vigil√¢ncia cont√≠nua.',
        actions: 'Implementar medidas preventivas imediatas: eliminar criadouros potenciais, intensificar educa√ß√£o em sa√∫de, realizar mutir√µes comunit√°rios e inspecionar pontos estrat√©gicos (borracharias, ferros-velhos, dep√≥sitos).'
      };
    }
    
    if (infestationLevel === 'Baixo' && coverageLevel === 'M√©dio') {
      return {
        level: 8,
        infestationLevel: 'Baixo',
        coverageLevel: 'M√©dio',
        iipCriteria: '< 1%',
        coverageCriteria: '>= 50%; < 80%',
        diagnosis: 'Confiabilidade moderada',
        immediateConclusion: 'Manter monitoramento',
        detail: 'O baixo n√∫mero de focos registrado, com uma amostragem de cobertura intermedi√°ria sugerem baixa ocorr√™ncia, mas ainda n√£o √© plenamente confi√°vel. A √°rea n√£o apresenta ind√≠cios de infesta√ß√£o ativa, mas o grau de certeza sobre isso ainda √© limitado. Ampliar a amostragem nas pr√≥ximas rodadas para consolidar o diagn√≥stico.',
        actions: 'Ampliar cobertura para refor√ßar confiabilidade, manter inspe√ß√µes regulares, e orientar moradores sobre elimina√ß√£o de recipientes. A√ß√µes de monitoramento cont√≠nuo.'
      };
    }
    
    // Baixo + Alto (n√≠vel 9)
    return {
      level: 9,
      infestationLevel: 'Baixo',
      coverageLevel: 'Alto',
      iipCriteria: '< 1%',
      coverageCriteria: '>= 80%',
      diagnosis: 'Satisfat√≥rio',
      immediateConclusion: 'Situa√ß√£o controlada',
      detail: 'Poucos focos identificados e a amostragem atingiu um patamar considerado satisfat√≥rio em termos de cobertura. O dado √© confi√°vel e indica que, neste momento, n√£o h√° sinais de ocorr√™ncia no local. Ainda assim, √°reas sem focos devem ser acompanhadas regularmente para garantir manuten√ß√£o da situa√ß√£o. Manter o monitoramento peri√≥dico da √°rea.',
      actions: 'Manter rotina de visitas, vigil√¢ncia cont√≠nua, a√ß√µes educativas e monitoramento quinzenal.'
    };
  }

  /**
   * Busca dados de visitas de rotina com classifica√ß√£o de prioridades
   */
  async getRoutineVisitData(organizationId: string): Promise<RoutineVisitData[]> {
    try {
      console.log('üîÑ Buscando dados de visitas de rotina para classifica√ß√£o:', organizationId);
      
      // Buscar apenas visitas de rotina
      const visitsQuery = query(
        collection(db, this.VISITS_COLLECTION),
        where('organizationId', '==', organizationId),
        where('type', '==', 'routine'),
        orderBy('createdAt', 'desc'),
        limit(500)
      );

      const visitsSnapshot = await getDocs(visitsQuery);
      const visits: VisitForm[] = [];

      visitsSnapshot.forEach((doc) => {
        const data = doc.data();
        visits.push({
          ...data,
          id: doc.id,
          createdAt: data.createdAt?.toDate() || new Date(),
          updatedAt: data.updatedAt?.toDate() || new Date()
        } as VisitForm);
      });

      console.log(`‚úÖ ${visits.length} visitas de rotina carregadas`);

      // Agrupar por bairro
      const neighborhoods = new Map<string, {
        visits: VisitForm[];
        totalVisits: number;
        positiveVisits: number;
        completedVisits: number;
        lastUpdate: Date;
        coordinates: [number, number][];
      }>();

      visits.forEach(visit => {
        if (!visit.neighborhood) return;

        const neighborhood = visit.neighborhood;
        if (!neighborhoods.has(neighborhood)) {
          neighborhoods.set(neighborhood, {
            visits: [],
            totalVisits: 0,
            positiveVisits: 0,
            completedVisits: 0,
            lastUpdate: visit.createdAt,
            coordinates: []
          });
        }

        const data = neighborhoods.get(neighborhood)!;
        data.visits.push(visit);
        data.totalVisits += 1;

        // Verificar se tem larvas (visitas de rotina usam larvaeFound/pupaeFound)
        const hasLarvae = (visit as any).larvaeFound || (visit as any).pupaeFound;
        if (hasLarvae) {
          data.positiveVisits += 1;
        }

        if (visit.status === 'completed') data.completedVisits++;
        if (visit.createdAt > data.lastUpdate) data.lastUpdate = visit.createdAt;
        
        if (visit.location?.latitude && visit.location?.longitude) {
          data.coordinates.push([visit.location.latitude, visit.location.longitude]);
        }
      });

      // Converter para RoutineVisitData com classifica√ß√£o
      const routineData: RoutineVisitData[] = [];
      
      neighborhoods.forEach((data, name) => {
        const iip = data.totalVisits > 0 ? (data.positiveVisits / data.totalVisits) * 100 : 0;
        const coverage = data.totalVisits > 0 ? (data.completedVisits / data.totalVisits) * 100 : 0;
        
        const classification = this.classifyPriority(iip, coverage);
        
        // Calcular coordenadas m√©dias
        let avgCoordinates: [number, number] | undefined;
        if (data.coordinates.length > 0) {
          const avgLat = data.coordinates.reduce((sum, coord) => sum + coord[0], 0) / data.coordinates.length;
          const avgLng = data.coordinates.reduce((sum, coord) => sum + coord[1], 0) / data.coordinates.length;
          avgCoordinates = [avgLat, avgLng];
        }

        routineData.push({
          neighborhood: name,
          totalVisits: data.totalVisits,
          positiveVisits: data.positiveVisits,
          completedVisits: data.completedVisits,
          iip: Math.round(iip * 100) / 100,
          coverage: Math.round(coverage * 100) / 100,
          priority: classification.level,
          classification,
          lastUpdate: data.lastUpdate,
          coordinates: avgCoordinates
        });
      });

      // Ordenar por prioridade (menor n√∫mero = maior prioridade)
      return routineData.sort((a, b) => a.priority - b.priority);
    } catch (error) {
      console.error('‚ùå Erro ao buscar dados de visitas de rotina:', error);
      throw new Error(`Falha ao carregar dados de visitas de rotina: ${error}`);
    }
  }
}

export const firebaseDashboardService = new FirebaseDashboardService();
